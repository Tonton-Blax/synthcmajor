graph SynthMain [[ main ]]
{
    input GateToNote.boolIn  [[ name: "boolIn", init: false, type: "bool" ]];
    input freqHandler.osc1FreqIn [[ name: "Osc1FreqIn",  min: 40, max: 40000, init:  10000, type: "float",  step: 1 ]];
    input freqHandler.osc2FreqIn [[ name: "Osc2FreqIn",  min: 40, max: 40000, init:  20000, type: "float",  step: 1 ]];
    input freqHandler.osc1Volume [[ name: "osc1Volume",  min: 0, max: 1, init:  0.5, type: "float",  step: 0.01 ]];
    input freqHandler.osc2Volume [[ name: "osc2Volume",  min: 0, max: 1, init:  0.5, type: "float",  step: 0.01 ]];
    input freqHandler.osc2Shape [[ name: "osc2Shape",  min: 0, max: 5, init:  0.5, type: "float",  step: 0.01 ]];
    input event float release [[ name: "release",  min: 0.001, max: 500, init:  1, type: "float",  step: 0.1 ]];
    input event float attack [[ name: "attack",  min: 0, max: 500, init:  1, type: "float",  step: 0.1 ]];
    input event float decay [[ name: "decay",  min: 0, max: 100, init:  1, type: "float",  step: 0.1 ]];
    input event float sustain [[ name: "sustain",  min: 0, max: 1, init:  0.5, type: "float",  step: 0.01 ]];

    output stream float audioOut;

    node
    {
        voices = Voice[8];
        freqHandler = FreqHandler;
        voiceAllocator = std::voices::VoiceAllocator(8);
        asr = ADSRE;
    }


    connection
    {
        GateToNote.noteOut -> std::midi::NoteToMIDI -> std::midi::MPEConverter -> voiceAllocator;
        voiceAllocator.voiceEventOut -> voices.noteOn, voices.noteOff, voices.pitchBend;
        freqHandler.osc1FreqOut -> voices.osc1FreqIn;
        freqHandler.osc2FreqOut -> voices.osc2FreqIn;
        freqHandler.osc1VolumeOut -> voices.osc1Volume;
        freqHandler.osc2VolumeOut -> voices.osc2Volume;
        freqHandler.osc2ShapeOut -> voices.osc2Shape;
        attack -> voices.attack;
        decay -> voices.decay;
        sustain -> voices.sustain;
        release -> voices.release;
        voices -> audioOut;
    }
}

graph Voice
{
    input event
    {   
        std::notes::NoteOn noteOn;
        std::notes::NoteOff noteOff;
        std::notes::PitchBend pitchBend;
        float osc1FreqIn;
        float osc2FreqIn;
        float attack;
        float release;
        float sustain;
        float decay;
        float osc2Shape;
    }

    input value {
        float osc1Volume;
        float osc2Volume;
    }

    output stream float audioOut;
    const float myPi = float32(3.14159265359);

    node
    {
        envelope = ADSRE;
        attenuator = std::levels::DynamicGain (float);
        ntf = NoteToFrequency;
        osc1 = std::oscillators::Sine (float, 440);
        osc2 = std::oscillators::MorphableOsc (float, std::oscillators::Shape::sawtoothUp, 440);
        smooth = std::filters::tpt::svf::Processor(std::filters::tpt::svf::Mode::highPass, 60, 5);
    }

    float32 preSmooth(float32 a, float32 b) {
        // I have no idea what i'm doing
        return float32( osc1Volume * std::intrinsics::tanh(a) ) + float32( osc2Volume * std::intrinsics::tanh(b) );
    }

    connection
    {
        noteOn, noteOff -> ntf.eventIn;
        osc2Shape -> osc2.shapeIn;
        ntf.frequencyOut, osc1FreqIn -> osc1.frequencyIn;
        ntf.frequencyOut, osc2FreqIn -> osc2.frequencyIn;
        attack -> envelope.attack;
        decay -> envelope.decay;
        sustain -> envelope.sustain;
        release -> envelope.release;
        noteOn, noteOff -> envelope.eventIn;
        envelope.gainOut -> attenuator.gain;
        preSmooth(osc1.out, osc2.out) -> smooth.in;
        smooth.out -> attenuator.in;
        attenuator -> audioOut;
    }
}

graph FreqHandler
{
    input event {
        float osc1FreqIn;
        float osc2FreqIn;
        float osc2Shape;
    }
    input value float osc1Volume;
    input value float osc2Volume;

    output event {
        float osc1FreqOut;
        float osc2FreqOut;
        float osc2ShapeOut;
    }
    output value float osc1VolumeOut;
    output value float osc2VolumeOut;


    const float freqFactor = 1.5f;

    event osc1FreqIn (float newFreq)  {
        osc1FreqOut <- newFreq * freqFactor / 100.0f;
    }
    event osc2FreqIn (float newFreq)  {
        osc2FreqOut <- newFreq * freqFactor / 100.0f;
    }
    connection {
        osc2Shape -> osc2ShapeOut;
        osc1Volume -> osc1VolumeOut;
        osc2Volume -> osc2VolumeOut;
    }
}

graph GateToNote
{
    input event bool boolIn;
    output event (std::notes::NoteOn,
                std::notes::NoteOff) noteOut;


    void play(int p)
    {
        std::notes::NoteOn noteOn;
        noteOn.pitch = float(p);
        noteOn.velocity = 1.0f;
        noteOut <- noteOn;
    }

    void stop(int p)
    {
        std::notes::NoteOff noteOff;
        noteOff.pitch = float(p);
        noteOff.velocity = 1.0f;
        noteOut <- noteOff;
    }

    event boolIn (bool g) {
        std::random::RNG rng = (processor.session);
        let pitch = 50 + wrap<60>(rng.getInt32());

        if (g) {
            play(pitch);
        }
        else
            stop(pitch);
    }
}

processor NoteToFrequency {
    input event (std::notes::NoteOn,std::notes::NoteOff) eventIn;
    input event int detuning;
    output event float frequencyOut;

    wrap<8> voiceIndex;
    int detuningFactor = 4;

    event detuning (int d) {
        detuningFactor = d;
    }

    event eventIn (std::notes::NoteOn note) {
        //frequencyOut <- std::notes::NoteToFrequency(note.pitch);
        frequencyOut <- note.pitch + float(++voiceIndex * detuningFactor);
    }
    event eventIn (std::notes::NoteOff note) {
        frequencyOut <- 0.0f;
    }
}